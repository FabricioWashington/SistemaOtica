package DAO.Crud;import DTO.Crud.FuncionarioDTO;import DTO.Login.LoginDTO;import DAO.Conexao.ConexaoDAO;import DTO.Crud.CargoFuncionarioDTO;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import javax.swing.JOptionPane;public class FuncionarioDAO {    Connection conn;    PreparedStatement pstm;    ResultSet rs;    ArrayList<LoginDTO> lista = new ArrayList<>();    public void cadastrarFuncionarioCompleto(FuncionarioDTO objcadastrofuncionario) {        conn = new ConexaoDAO().conectaBD();        try {            conn.setAutoCommit(false); // Desliga o modo de commit automático            // Registrar o cadastro            String sqlCadastro = "insert into cadastro_funcionarios (CPF, Nome_Completo, idFuncao,  Data_Cadastro, Data_Modificacao) values (?,?,?,?,?)";            PreparedStatement pstmCadastro = conn.prepareStatement(sqlCadastro);            pstmCadastro.setString(1, objcadastrofuncionario.getCPF());            pstmCadastro.setString(2, objcadastrofuncionario.getNome_Completo());            pstmCadastro.setInt(3, objcadastrofuncionario.getIdFuncao());            pstmCadastro.setTimestamp(4, new java.sql.Timestamp(objcadastrofuncionario.getData_Cadastro().getTime()));            pstmCadastro.setTimestamp(5, new java.sql.Timestamp(objcadastrofuncionario.getData_Modificacao().getTime()));            pstmCadastro.execute();            conn.commit(); // Efetua o commit das transações            // Exibir mensagem de sucesso            JOptionPane.showMessageDialog(null, "Os dados foram registrados corretamente.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, "Esse funcionario já foi cadastrado no sistema", "Erro", JOptionPane.ERROR_MESSAGE);            JOptionPane.showInputDialog(e);            try {                conn.rollback(); // Em caso de erro, faz rollback para desfazer as alterações            } catch (SQLException ex) {                ex.printStackTrace();            }        } finally {            try {                conn.setAutoCommit(true); // Restaura o modo de commit automático                conn.close(); // Fecha a conexão            } catch (SQLException ex) {                ex.printStackTrace();            }        }    }    public ResultSet listarIdFuncao(CargoFuncionarioDTO objCargoFuncionario) {        conn = new ConexaoDAO().conectaBD();        String sql = "SELECT * FROM cargo_funcionario ORDER BY cargo";        try {            pstm = conn.prepareStatement(sql);            return pstm.executeQuery();        } catch (SQLException e) {            System.out.println(e.getMessage());            return null;        }    }    // Método para listar todos os funcionários    public ArrayList<FuncionarioDTO> listarFuncionarios() {        ArrayList<FuncionarioDTO> listaFuncionarios = new ArrayList<>();        conn = new ConexaoDAO().conectaBD();        String sql = "SELECT * FROM cadastro_funcionarios";        try {            pstm = conn.prepareStatement(sql);            rs = pstm.executeQuery();            while (rs.next()) {                FuncionarioDTO funcionario = new FuncionarioDTO();                funcionario.setIdFuncionarios(rs.getInt("idFuncionario"));                funcionario.setCPF(rs.getString("CPF"));                funcionario.setNome_Completo(rs.getString("Nome_Completo"));                funcionario.setIdFuncao(rs.getInt("idFuncao"));                funcionario.setData_Cadastro(rs.getTimestamp("Data_Cadastro"));                funcionario.setData_Modificacao(rs.getTimestamp("Data_Modificacao"));                listaFuncionarios.add(funcionario);            }        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, "Erro ao listar funcionários: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);        } finally {            try {                conn.close();            } catch (SQLException ex) {                ex.printStackTrace();            }        }        return listaFuncionarios;    }    // Método para atualizar um funcionário    public void atualizarFuncionario(FuncionarioDTO funcionarioDTO) {        conn = new ConexaoDAO().conectaBD();        String sql = "UPDATE cadastro_funcionarios SET CPF = ?, Nome_Completo = ?, idFuncao = ?, Data_Modificacao = ? WHERE idFuncionario = ?";        try {            conn.setAutoCommit(false);            pstm = conn.prepareStatement(sql);            pstm.setString(1, funcionarioDTO.getCPF());            pstm.setString(2, funcionarioDTO.getNome_Completo());            pstm.setInt(3, funcionarioDTO.getIdFuncao());            pstm.setTimestamp(4, new java.sql.Timestamp(funcionarioDTO.getData_Modificacao().getTime()));            pstm.setInt(5, funcionarioDTO.getIdFuncionarios());            int rowsUpdated = pstm.executeUpdate();            if (rowsUpdated > 0) {                JOptionPane.showMessageDialog(null, "Funcionário atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);                conn.commit();            } else {                JOptionPane.showMessageDialog(null, "Nenhum funcionário encontrado para atualização.", "Aviso", JOptionPane.WARNING_MESSAGE);            }        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, "Erro ao atualizar funcionário: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);            try {                conn.rollback();            } catch (SQLException ex) {                ex.printStackTrace();            }        } finally {            try {                conn.setAutoCommit(true);                conn.close();            } catch (SQLException ex) {                ex.printStackTrace();            }        }    }    // Método para excluir um funcionário    public void excluirFuncionario(String cpf) {        conn = new ConexaoDAO().conectaBD();        String sql = "DELETE FROM cadastro_funcionarios WHERE CPF = ?";        try {            conn.setAutoCommit(false);            pstm = conn.prepareStatement(sql);            pstm.setString(1, cpf);            int rowsDeleted = pstm.executeUpdate();            if (rowsDeleted > 0) {                JOptionPane.showMessageDialog(null, "Funcionário excluído com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);                conn.commit();            } else {                JOptionPane.showMessageDialog(null, "Nenhum funcionário encontrado para exclusão.", "Aviso", JOptionPane.WARNING_MESSAGE);            }        } catch (SQLException e) {            JOptionPane.showMessageDialog(null, "Erro ao excluir funcionário: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);            try {                conn.rollback();            } catch (SQLException ex) {                ex.printStackTrace();            }        } finally {            try {                conn.setAutoCommit(true);                conn.close();            } catch (SQLException ex) {                ex.printStackTrace();            }        }    }}